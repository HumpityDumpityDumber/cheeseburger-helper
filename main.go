package main

import (
	"fmt"
	"image"
	"image/color"
	"image/draw"
	"image/png"
	"os"

	"golang.org/x/term"
)

var Font = map[rune][8]byte{
	' ': {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	'0': {0x3C, 0x66, 0x6E, 0x7E, 0x76, 0x66, 0x3C, 0x00},
	'1': {0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00},
	'2': {0x3C, 0x66, 0x06, 0x1C, 0x30, 0x66, 0x7E, 0x00},
	'3': {0x3C, 0x66, 0x06, 0x1C, 0x06, 0x66, 0x3C, 0x00},
	'4': {0x0C, 0x1C, 0x3C, 0x6C, 0x7E, 0x0C, 0x0C, 0x00},
	'5': {0x7E, 0x60, 0x7C, 0x06, 0x06, 0x66, 0x3C, 0x00},
	'6': {0x1C, 0x30, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00},
	'7': {0x7E, 0x66, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x00},
	'8': {0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00},
	'9': {0x3C, 0x66, 0x66, 0x3E, 0x06, 0x0C, 0x38, 0x00},

	'A': {0x18, 0x3C, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x00},
	'B': {0x7C, 0x66, 0x66, 0x7C, 0x66, 0x66, 0x7C, 0x00},
	'C': {0x3C, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3C, 0x00},
	'D': {0x78, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0x78, 0x00},
	'E': {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x7E, 0x00},
	'F': {0x7E, 0x60, 0x60, 0x7C, 0x60, 0x60, 0x60, 0x00},
	'G': {0x3C, 0x66, 0x60, 0x6E, 0x66, 0x66, 0x3C, 0x00},
	'H': {0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00},
	'I': {0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00},
	'J': {0x1E, 0x0C, 0x0C, 0x0C, 0x0C, 0x6C, 0x38, 0x00},
	'K': {0x66, 0x6C, 0x78, 0x70, 0x78, 0x6C, 0x66, 0x00},
	'L': {0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7E, 0x00},
	'M': {0x63, 0x77, 0x7F, 0x6B, 0x63, 0x63, 0x63, 0x00},
	'N': {0x66, 0x76, 0x7E, 0x7E, 0x6E, 0x66, 0x66, 0x00},
	'O': {0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00},
	'P': {0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00},
	'Q': {0x3C, 0x66, 0x66, 0x66, 0x6A, 0x6C, 0x36, 0x00},
	'R': {0x7C, 0x66, 0x66, 0x7C, 0x78, 0x6C, 0x66, 0x00},
	'S': {0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00},
	'T': {0x7E, 0x5A, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00},
	'U': {0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00},
	'V': {0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00},
	'W': {0x63, 0x63, 0x63, 0x6B, 0x7F, 0x77, 0x63, 0x00},
	'X': {0x66, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x66, 0x00},
	'Y': {0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00},
	'Z': {0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00},

	'a': {0x00, 0x00, 0x3C, 0x06, 0x3E, 0x66, 0x3E, 0x00},
	'b': {0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x7C, 0x00},
	'c': {0x00, 0x00, 0x3C, 0x66, 0x60, 0x66, 0x3C, 0x00},
	'd': {0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00},
	'e': {0x00, 0x00, 0x3C, 0x66, 0x7E, 0x60, 0x3C, 0x00},
	'f': {0x1C, 0x36, 0x30, 0x7C, 0x30, 0x30, 0x78, 0x00},
	'g': {0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x3C},
	'h': {0x60, 0x60, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00},
	'i': {0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00},
	'j': {0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C},
	'k': {0x60, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0x00},
	'l': {0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00},
	'm': {0x00, 0x00, 0x6B, 0x7F, 0x7F, 0x63, 0x63, 0x00},
	'n': {0x00, 0x00, 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00},
	'o': {0x00, 0x00, 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00},
	'p': {0x00, 0x00, 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60},
	'q': {0x00, 0x00, 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06},
	'r': {0x00, 0x00, 0x6C, 0x76, 0x60, 0x60, 0x60, 0x00},
	's': {0x00, 0x00, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x00},
	't': {0x30, 0x30, 0x7C, 0x30, 0x30, 0x36, 0x1C, 0x00},
	'u': {0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00},
	'v': {0x00, 0x00, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x00},
	'w': {0x00, 0x00, 0x63, 0x63, 0x6B, 0x7F, 0x36, 0x00},
	'x': {0x00, 0x00, 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00},
	'y': {0x00, 0x00, 0x66, 0x66, 0x66, 0x3E, 0x06, 0x3C},
	'z': {0x00, 0x00, 0x7E, 0x0C, 0x18, 0x30, 0x7E, 0x00},

	'.':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00},
	',':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30},
	'!':  {0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00},
	'?':  {0x3C, 0x66, 0x06, 0x0C, 0x18, 0x00, 0x18, 0x00},
	':':  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00},
	';':  {0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30},
	'-':  {0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00},
	'_':  {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF},
	'(':  {0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00},
	')':  {0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00},
	'[':  {0x1E, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00},
	']':  {0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00},
	'{':  {0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00},
	'}':  {0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00},
	'/':  {0x06, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x60, 0x00},
	'\\': {0x60, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x06, 0x00},
	'+':  {0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00},
	'=':  {0x00, 0x00, 0x7E, 0x00, 0x7E, 0x00, 0x00, 0x00},
	'*':  {0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00},
	'#':  {0x00, 0x6C, 0x6C, 0xFE, 0x6C, 0x6C, 0x00, 0x00},
	'@':  {0x3C, 0x42, 0x9D, 0xA5, 0x9D, 0x40, 0x3C, 0x00},
	'%':  {0x60, 0x92, 0x19, 0x22, 0x4C, 0x92, 0x06, 0x00},
	'$':  {0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00},
	'&':  {0x38, 0x6C, 0x38, 0x76, 0x6C, 0x66, 0x3A, 0x00},
	'\'': {0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00},
	'"':  {0x36, 0x36, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00},
	'`':  {0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
	'^':  {0x10, 0x38, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00},
	'|':  {0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00},
	'~':  {0x00, 0x00, 0x6E, 0x3B, 0x00, 0x00, 0x00, 0x00},
}

func RenderTextToPNG(text, outPath string) error {
	// absolutely massive scale for huge output
	const scale = 50
	const glyphW, glyphH, spacing = 8, 8, 2

	// measure lines and widest line (in glyphs)
	maxCols := 0
	cols := 0
	lines := 1
	for _, r := range text {
		if r == '\n' {
			if cols > maxCols {
				maxCols = cols
			}
			cols = 0
			lines++
			continue
		}
		cols++
	}
	if cols > maxCols {
		maxCols = cols
	}
	if maxCols == 0 {
		maxCols = 1
	}

	// scaled dimensions
	width := maxCols*(glyphW*scale) + (maxCols-1)*(spacing*scale)
	height := lines*(glyphH*scale) + (lines-1)*(spacing*scale)
	if width <= 0 {
		width = 1
	}
	if height <= 0 {
		height = 1
	}

	img := image.NewRGBA(image.Rect(0, 0, width, height))
	// fill background white
	draw.Draw(img, img.Bounds(), &image.Uniform{color.White}, image.Point{}, draw.Src)

	px, py := 0, 0
	for _, r := range text {
		if r == '\n' {
			px = 0
			py += (glyphH*scale + spacing*scale)
			continue
		}
		glyph, ok := Font[r]
		if !ok {
			glyph = Font[' '] // fallback
		}
		for y := 0; y < glyphH; y++ {
			row := glyph[y]
			for x := 0; x < glyphW; x++ {
				if ((row >> (7 - x)) & 1) == 1 {
					// draw scaled pixel block
					baseX := px + x*scale
					baseY := py + y*scale
					for sy := 0; sy < scale; sy++ {
						for sx := 0; sx < scale; sx++ {
							img.Set(baseX+sx, baseY+sy, color.Black)
						}
					}
				}
			}
		}
		px += (glyphW*scale + spacing*scale)
	}

	f, err := os.Create(outPath)
	if err != nil {
		return err
	}
	defer f.Close()

	// Create PNG encoder with no compression
	encoder := &png.Encoder{
		CompressionLevel: png.NoCompression,
	}

	return encoder.Encode(f, img)
}

func main() {
	fmt.Print("\033[?1049h")   // switch to alternate buffer
	fmt.Print("\033[H\033[2J") // clear
	oldState, err := term.MakeRaw(int(os.Stdin.Fd()))
	if err != nil {
		panic(err)
	}

	buf := make([]byte, 1)
	text := []string{}

	for {
		n, err := os.Stdin.Read(buf)
		if err != nil || n == 0 {
			break
		}
		if buf[0] == 19 { // ctrl s
			break
		}

		var s string
		switch buf[0] {
		case 13: // enter
			s = "\r\n"
		case 127: // backspace
			s = "\x1b[D\x1b[K"
		default:
			s = string(buf[0])
		}

		text = append(text, s)

		fmt.Print("\033[H\033[2J") // clear term
		// print each part (value)
		for _, part := range text {
			fmt.Print(part)
		}
	}

	fmt.Print("\033[H\033[2J") // clear term
	content := fmt.Sprintf("%#v", text)
	if err := RenderTextToPNG(content, "save.png"); err != nil {
		fmt.Fprintln(os.Stderr, "render error:", err)
	}

	// restore terminal mode and switch back to the main screen before printing
	term.Restore(int(os.Stdin.Fd()), oldState) // make sure we're in normal (cooked) mode
	fmt.Print("\033[?1049l")                   // switch back to main buffer

	fmt.Println("\nfile saved to save.png")
}
